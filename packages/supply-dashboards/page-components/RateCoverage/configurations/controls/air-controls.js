import {
	currencyOptions,
	densityCargoOptions,
	densityRatioOptions,
	flighOperationTypeOptions,
	handlingtypeOptions, packagingTypeOptions, priceTypeOptions, airRateTypeOptions,
} from '../helpers/constants';

import styles from './styles.module.css';

const airControls = ({
	data, listPartnerUserOptions, user_id, originLocationOptions, destinationLocationOptions,
	serviceProviders, listAirLineOptions, source,
}) => {
	const controls = [
		{
			name        : 'rate_type',
			label       : 'Rate type',
			placeholder : 'Select Rate Type',
			type        : 'select',
			options     : airRateTypeOptions,
			span        : 4,
			value       : data?.rate_type,
			rules       : { required: 'rate type is required' },
		},
		{
			name        : 'origin_airport_id',
			label       : 'Origin Airport',
			placeholder : 'Origin Location',
			type        : 'select',
			value       : data?.origin_airport?.id,
			disabled    : data?.origin_airport?.id,
			...originLocationOptions,
			span        : 4,
			rules       : { required: 'origin airport is required' },
		},
		{
			name        : 'destination_airport_id',
			label       : 'Destination Airport',
			placeholder : 'Destination Location',
			type        : 'select',
			value       : data?.destination_airport?.id,
			disabled    : data?.destination_airport?.id,
			...destinationLocationOptions,
			span        : 4,
			rules       : { required: 'destination airport is required' },
		},
		{
			name        : 'service_provider_id',
			label       : 'Service Provider',
			placeholder : 'Service Provider',
			type        : 'select',
			...serviceProviders,
			span        : 4,
			value       : data?.service_provider_id,
			rules       : { required: 'service provider is required' },
		},
		{
			name        : 'sourced_by_id',
			label       : 'Rate Provided By LSP User',
			placeholder : 'Rate Provided By LSP User',
			type        : 'select',
			span        : 4,
			rules       : { required: 'sourced by is required' },
		},
		{
			name        : 'procured_by_id',
			label       : 'Rate Procured by Cogoport Agent',
			placeholder : 'Rate Procured by Cogoport Agent',
			type        : 'select',
			...listPartnerUserOptions,
			value       : user_id,
			span        : 4,
			rules       : { required: 'procured by is required' },
		},
		{
			name        : 'commodity',
			label       : 'Commodity',
			placeholder : 'Commodity',
			type        : 'select',
			value       : data?.commodity || 'general',
			span        : 4,
			rules       : { required: 'commodity is required' },
		},
		{
			name        : 'airline_id',
			label       : 'Airline',
			placeholder : 'AirLine Line',
			type        : 'select',
			span        : 4,
			value       : data?.airline_id,
			...listAirLineOptions,
			rules       : { required: 'airline is required' },
		},
		{
			label   : 'Flight Operation Type',
			name    : 'flight_operation_type',
			type    : 'select',
			span    : 4,
			options : flighOperationTypeOptions,
			value   : data?.operation_type,
			rules   : { required: 'flight operation type is required' },
		},
		{
			label     : 'Validity Start',
			name      : 'validity_start',
			type      : 'date_picker',
			className : styles.air_date_filter,
			span      : 4,
			rules     : { required: 'validity is required' },
		},
		{
			label     : 'Validity End',
			name      : 'validity_end',
			type      : 'date_picker',
			className : styles.air_date_filter,
			span      : 4,
			rules     : { required: 'validity end is required' },
		},
		{
			label   : 'Packaging Type',
			name    : 'packaging_type',
			type    : 'select',
			span    : 4,
			options : packagingTypeOptions,
			value   : data?.shipment_type,
			rules   : { required: 'packaging type is required' },
		},
		{
			label   : 'Handling Type',
			name    : 'handling_type',
			type    : 'select',
			span    : 4,
			options : handlingtypeOptions,
			value   : data?.stacking_type,
			rules   : { required: 'handling type is required' },
		},
		{
			label : 'Minimum Price',
			name  : 'minimum_price',
			span  : 4,
			type  : 'number',
			rules : {
				required: 'min price is required',
			},
		},
		{
			label   : 'Currency',
			name    : 'currency',
			span    : 4,
			options : currencyOptions,
			type    : 'select',
			rules   : { required: 'currency is required' },
		},
		{
			label   : 'Price Type',
			name    : 'price_type',
			type    : 'select',
			options : priceTypeOptions,
			value   : data?.price_type,
			span    : 4,
			rules   : { required: 'price type is required' },
		},
		{
			label    : 'Density Cargo',
			name     : 'density_cargo',
			type     : 'select',
			value    : data?.density_cargo || 'high_density',
			options  : densityCargoOptions,
			disabled : true,
			span     : 4,
			rules    : { required: 'density cargo is required' },
		},
		{
			label       : 'Density Ratio',
			name        : 'density_ratio',
			value       : data?.density_ratio || '1_500',
			disabled    : true,
			span        : 4,
			options     : densityRatioOptions,
			type        : 'select',
			placeholder : 'Density Ratio',
			rules       : { required: 'density ratio is required' },
		},
		source === 'live_booking'
			? {
				name  : 'is_shipper_specific',
				label : 'Shipper Specific Rate',
				type  : 'checkbox',
				span  : 4,
			}
			: null,
		{
			name            : 'booking_rate_procurement_proof',
			label           : 'Booking rate procurement proof',
			span            : 4,
			type            : 'file',
			themeType       : 'secondary',
			drag            : true,
			uploadIcon      : 'ic-upload',
			onlyURLOnChange : true,
			accept          : 'image/*,.pdf,.doc,.docx',
			uploadType      : 'aws',
		},
		{
			name        : 'weight_slabs',
			type        : 'fieldArray',
			heading     : 'Weight Slabs',
			showButtons : true,
			buttonText  : 'Add',
			value       : [{
				lower_limit : '',
				upper_limit : '',
				price       : '',
			}],
			noDeleteButtonTill : 1,
			controls           : [
				{
					name        : 'lower_limit',
					type        : 'number',
					placeholder : 'Lower Limit',
					span        : 2,
					rules       : { required: 'lower limit is required' },
				},
				{
					name        : 'upper_limit',
					type        : 'number',
					span        : 2,
					placeholder : 'Upper Limit',
					rules       : { required: 'upper limit is required' },
				},
				{
					name        : 'price_per_unit',
					type        : 'number',
					placeholder : 'Price Per Unit',
					span        : 2,
					rules       : { required: 'is required' },
				},
				{
					name        : 'currency',
					placeholder : 'Currency',
					type        : 'select',
					options     : currencyOptions,
					span        : 3,
					rules       : { required: 'currency is required' },
				},
			],
		},
	];
	return controls.filter((control) => control !== null);
};
export default airControls;
