import containerSize from '@cogoport/constants/rail-container-sizes.json';
import containerTypes from '@cogoport/constants/rail-container-types.json';

import COMMODITY_TYPES from '../../../../../configs/COMMODITY_TYPE.json';
import FREE_DAYS_TYPES from '../../../../../configs/FREE_DAYS_TYPE.json';
import SPECIFICITY_TYPES from '../../../../../configs/SPECIFICITY_TYPE.json';

const CONTAINER_LOAD_TYPE = [
	{ label: 'Container Rake', value: 'container_rake' },
	{ label: 'Rake', value: 'rake' },
];

const CONTAINER_LOAD_SUB_TYPE = [
	{ label: 'Piece Mile', value: 'piece_mile' },
	{ label: 'Full Rake', value: 'full_rake' },
];
const fieldArrayField = [
	{
		label       : 'Lower Limit',
		name        : 'lower_limit',
		type        : 'number',
		span        : 3,
		placeholder : 'Lower Limit (in Days)',
		size        : 'sm',
		rules       : { required: 'This is required' },
	},
	{
		name        : 'upper_limit',
		type        : 'number',
		span        : 3,
		size        : 'sm',
		label       : 'Upper Limit',
		placeholder : 'Upper Limit (in Days)',
		rules       : { required: 'This is required' },
	},
	{
		name        : 'currency',
		type        : 'async_select',
		asyncKey    : 'list_exchange_rate_currencies',
		span        : 3,
		label       : 'Currency',
		size        : 'sm',
		placeholder : 'Currency',
		rules       : { required: 'This is required' },
	},
	{
		name        : 'price',
		type        : 'number',
		span        : 3,
		size        : 'sm',
		label       : 'Price',
		placeholder : 'Price',
		rules       : { required: 'This is required' },
	},
];

const getLabel = ({ label, name }) => ({ label, name, span: 12 });

const getControls = ({ item = {} }) => [
	getLabel({ label: 'Location Details Rail', name: 'location_details' }),
	{
		name        : 'location_id',
		size        : 'sm',
		span        : 3,
		value       : item?.location_id,
		asyncKey    : 'list_locations',
		type        : 'async_select',
		disabled    : !!item?.location_id,
		isClearable : true,
		placeholder : 'Locations',
		params      : { filters: { type: ['railway_terminal'] } },
		rules       : { required: 'This is required' },
	},
	getLabel({ label: 'Service Provider Details', name: 'service_details' }),
	{
		name        : 'service_provider_id',
		placeholder : 'Service Provider',
		type        : 'async_select',
		size        : 'sm',
		value       : item?.service_provider_id || undefined,
		disabled    : !!item?.service_provider_id,
		asyncKey    : 'organizations',
		initialCall : true,
		span        : 4,
		rules       : { required: 'This is required' },
		params      : { filters: { account_type: 'service_provider', status: 'active', kyc_status: 'verified' } },
		isClearable : true,
	},
	{
		name        : 'sourced_by_id',
		placeholder : 'Rate Provided by user',
		type        : 'async_select',
		asyncKey    : 'organization_users',
		size        : 'sm',
		isClearable : true,
		span        : 4,
		valueKey    : 'user_id',
		rules       : { required: 'This is required' },
	},

	{
		label : 'Container Details',
		name  : 'container_details',
		span  : 12,
	},
	{
		name        : 'container_load_type',
		placeholder : 'Container Load Type',
		type        : 'select',
		size        : 'sm',
		value       : item?.container_load_type || undefined,
		disabled    : !!item?.container_load_type,
		options     : CONTAINER_LOAD_TYPE,
		span        : 3,
	},
	{
		name        : 'container_size',
		type        : 'select',
		size        : 'sm',
		span        : 3,
		value       : item?.container_size || undefined,
		disabled    : !!item?.container_size,
		placeholder : 'Container Size',
		options     : containerSize,
		rules       : { required: 'This is required' },
	},
	{
		name        : 'container_type',
		type        : 'select',
		size        : 'sm',
		span        : 3,
		value       : item?.container_type || undefined,
		disabled    : !!item?.container_type,
		placeholder : 'Container Type',
		rules       : { required: 'This is required' },
		options     : containerTypes,
	},
	{
		name        : 'container_load_sub_type',
		type        : 'select',
		span        : 3,
		size        : 'sm',
		value       : item?.container_load_sub_type || undefined,
		disabled    : !!item.container_load_sub_type,
		placeholder : 'Container Load Sub Type',
		rules       : { required: 'This is required' },
		options     : CONTAINER_LOAD_SUB_TYPE,
	},
	{
		label : 'Commodity Details',
		name  : 'commodity_details',
		span  : 12,
	},
	{
		name        : 'commodity',
		placeholder : 'Commodity',
		type        : 'select',
		span        : 4,
		size        : 'sm',
		value       : item?.commodity || undefined,
		disabled    : !!item.commodity,
		options     : COMMODITY_TYPES.rail,
	},
	{
		name        : 'commodity_sub_type',
		placeholder : 'Commodity Sub Type',
		type        : 'select',
		size        : 'sm',
		value       : item?.commodity_sub_type || undefined,
		disabled    : !!item.commodity_sub_type,
		span        : 4,
		// opitons based on commodity
	},

	{
		label : 'Free Limit Details',
		span  : 12,
		name  : 'other_details',
	},
	{
		name        : 'free_limit',
		type        : 'number',
		size        : 'sm',
		span        : 4,
		value       : item?.free_limit || undefined,
		placeholder : 'Free Limit Days',
	},
	{
		name        : 'specificity_type',
		type        : 'select',
		span        : 4,
		value       : item?.specificity_type || undefined,
		// disabled: !!task.id,
		size        : 'sm',
		placeholder : 'Specificity Type',
		options     : SPECIFICITY_TYPES.rail,
	},
	{
		label : 'Validity Start and End Date',
		span  : 12,
		name  : 'validity_details',
	},
	{
		name  : 'validity',
		type  : 'date_range_picker',
		value : (item?.validity_start && item?.validity_end)
			? { startDate: new Date(item?.validity_start), endDate: new Date(item?.validity_end) } : {},
		span        : 8,
		placeholder : 'Select Validity Range',
		rules       : { required: 'This is required' },
	},

	{
		label : 'Previous Days Applicable',
		name  : 'previous_days_applicable_label',
		span  : 12,
	},
	{
		name    : 'previous_days_applicable',
		type    : 'chips',
		span    : 4,
		value   : item?.previous_days_applicable ? 'yes' : 'no',
		options : [
			{
				children : 'Yes',
				key      : 'yes',
			},
			{
				children : 'No',
				key      : 'no',
			},
		],
	},
	{
		label : 'Container Limit',
		name  : 'container_limit',
		span  : 12,
	},
	{
		name              : 'containers_count_lower_limit',
		type              : 'number',
		label             : 'Lower Limit',
		size              : 'sm',
		span              : 4,
		removeLabelMargin : true,
		value             : item?.containers_count_lower_limit || undefined,
		disabled          : !!item?.containers_count_lower_limit,
		placeholder       : 'Containers Count Lower Limit',
		rules             : { required: 'This is required' },
	},
	{
		name              : 'containers_count_upper_limit',
		type              : 'number',
		label             : 'Upper Limit',
		size              : 'sm',
		span              : 4,
		removeLabelMargin : true,
		value             : item?.containers_count_upper_limit || undefined,
		disabled          : !!item?.containers_count_upper_limit,
		placeholder       : 'Containers Count Upper Limit',
		rules             : { required: 'This is required' },
	},
	{
		label : 'Free Days Type',
		name  : 'free_days_type_label',
		span  : 12,
	},
	{
		name        : 'free_days_type',
		type        : 'select',
		span        : 4,
		value       : item?.free_days_type || undefined,
		// disabled  : !!task.id,
		className   : 'primary lg',
		size        : 'sm',
		options     : FREE_DAYS_TYPES,
		placeholder : 'Free Days Type',
		rules       : { required: 'This is required' },
	},
	{
		label : 'Demurrage',
		name  : 'demurrage_label',
		span  : 12,
	},
	{
		type               : 'fieldArray',
		showButtons        : true,
		name               : 'demurrage',
		buttonText         : 'Add Slab',
		noDeleteButtonTill : 0,
		value              : item?.free_days_type === 'demurrage' ? item?.slabs : [{ lower_limit: '' }],
		controls           : fieldArrayField,
	},
	{
		label : 'Detention',
		name  : 'detention_label',
		span  : 12,
	},
	{
		name               : 'detention',
		type               : 'fieldArray',
		showButtons        : true,
		buttonText         : 'Add Slab',
		noDeleteButtonTill : 0,
		value              : item?.free_days_type === 'detention' ? item?.slabs : [{ lower_limit: '' }],
		controls           : fieldArrayField,
	},
];

export default getControls;
