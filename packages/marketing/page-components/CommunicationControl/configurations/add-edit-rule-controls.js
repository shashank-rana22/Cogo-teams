import CATEGORY_OPTIONS from '../constants/CATEGORIES_OPTIONS.json';
import CHANNEL_OPTIONS from '../constants/CHANNEL_OPTIONS.json';
import getDatefromTime from '../utils/getDatefromTime';

const controls = ({ setSegmentData = () => {}, isEdit = 'false', itemVal = {} }) => {
	const startTime = getDatefromTime(itemVal?.day_start_time) || null;
	const endTime = getDatefromTime(itemVal?.day_end_time) || null;
	return [
		{
			name           : 'segmentation_id',
			label          : 'Segement',
			type           : 'async_select',
			asyncKey       : 'segments',
			initialCall    : true,
			placeholder    : 'Select Segment',
			rules          : { required: 'Required' },
			onChange       : (_v, obj) => { setSegmentData(obj); },
			span           : 4,
			labelKey       : 'name',
			disabled       : isEdit,
			value          : itemVal?.segmentation_id,
			defaultOptions : true,
		},
		{
			name        : 'category',
			label       : 'Category',
			type        : 'select',
			placeholder : 'Select Category',
			span        : 4,
			rules       : { required: 'Required' },
			disabled    : isEdit,
			value       : itemVal?.category,
			options     : CATEGORY_OPTIONS,
		},
		{
			name        : 'channel_type',
			label       : 'Channel',
			type        : 'select',
			placeholder : 'Select Channel',
			span        : 4,
			rules       : { required: 'Required' },
			disabled    : isEdit,
			value       : itemVal?.channel_type,
			options     : CHANNEL_OPTIONS,
		},
		{
			name        : 'actions',
			label       : 'Action',
			type        : 'select',
			placeholder : 'Select Action',
			span        : 3,
			rules       : { required: 'Required' },
			disabled    : isEdit,
			value       : itemVal?.actions,
			options     : [
				{ label: 'Stop', value: 'stop' },
				{ label: 'DND', value: 'dnd' },
			],
		},
		{
			name        : 'sub_action',
			label       : 'Sub-action',
			type        : 'select',
			placeholder : 'Select Action',
			span        : 3,
			rules       : { required: 'Required' },
			disabled    : isEdit,
			value       : itemVal?.sub_action,
			options     : [
				{ label: 'Indefinite', value: 'indefinite' },
				{ label: 'Fixed', value: 'fixed' },
			],
		},
		{
			name        : 'day',
			label       : 'Day',
			type        : 'select',
			placeholder : 'Select Day',
			span        : 3,
			rules       : { required: 'Required' },
			value       : itemVal?.sub_action,
			options     : [
				{ label: 'All Days', value: 'all' },
				{ label: 'Sunday', value: 'sunday' },
				{ label: 'Monday', value: 'monday' },
				{ label: 'Tuesday', value: 'tuesday' },
				{ label: 'Wednesday', value: 'wednesday' },
				{ label: 'Thursday', value: 'thursday' },
				{ label: 'Friday', value: 'friday' },
				{ label: 'Saturday', value: 'saturday' },
			],
		},
		{
			name  : '',
			label : '',
			span  : 6,
		},
		{
			name        : 'validity_start',
			label       : 'From',
			type        : 'datepicker',
			span        : 3,
			rules       : { required: 'From date is required' },
			placeholder : 'Select',
			value       : new Date(itemVal?.validity_start),
			minDate     : new Date(),
		},
		{
			name        : 'validity_end',
			label       : 'To',
			type        : 'datepicker',
			span        : 3,
			rules       : { required: 'To date is required' },
			placeholder : 'Select',
			value       : new Date(itemVal?.validity_end),
			minDate     : null,
		},
		{
			name  : 'day_start_time',
			label : 'FROM (HH/MM)',
			type  : 'timepicker',
			span  : 3,
			rules : { required: 'From time is required' },
			value : startTime,
		},
		{
			name  : 'day_end_time',
			label : 'TO (HH/MM)',
			type  : 'timepicker',
			span  : 3,
			rules : { required: 'To time is required' },
			value : endTime,
		},
	];
};
export default controls;
